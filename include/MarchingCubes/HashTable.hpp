#ifndef HASHTABLE_HPP
#define HASHTABLE_HPP

#include <vector>

#include "Position.hpp"

struct List{
  //----------------------------------------------------------------------------------------------------------------
  /// @brief A pointer to a list of indices
  //----------------------------------------------------------------------------------------------------------------
  std::vector<int>* L;
};


class HashTable
{
public:
    //----------------------------------------------------------------------------------------------------------------
    /// @brief Constructor for a HashTable
    //----------------------------------------------------------------------------------------------------------------
    HashTable(
        );
    //----------------------------------------------------------------------------------------------------------------
    /// @brief This clears the memory of the hashtable
    //----------------------------------------------------------------------------------------------------------------
    void clear(
        );
    //----------------------------------------------------------------------------------------------------------------
    /// @brief Gets the index of a given vertex
    /// @brief If the vertex does not exist then it is automatically added
    /// @param[in] _vertex is a vertex of the object
    //----------------------------------------------------------------------------------------------------------------
    int getIndex(
        const Position& _vertex
        );
    //----------------------------------------------------------------------------------------------------------------
    /// @brief Returns a list with all the vertices
    //----------------------------------------------------------------------------------------------------------------
    std::vector<float> getVertices(
        );
    //----------------------------------------------------------------------------------------------------------------
    /// @brief Initialises the HashTable by setting the size
    //----------------------------------------------------------------------------------------------------------------
    void initialise(
        );
    //----------------------------------------------------------------------------------------------------------------
    /// @brief Destructor of a HashTable
    //----------------------------------------------------------------------------------------------------------------
    ~HashTable();

private:
    //----------------------------------------------------------------------------------------------------------------
    /// @brief Returns the position of the vertex inside the hash table
    /// @param[in] _vertex is a vertex of the object
    //----------------------------------------------------------------------------------------------------------------
    unsigned int vertexHashFunction(
        const Position& _vertex
        );
    //----------------------------------------------------------------------------------------------------------------
    /// @brief The hash table, where all indices of the vertices are saved for cheap search
    //----------------------------------------------------------------------------------------------------------------
    std::vector<List> m_hashTable;
    //----------------------------------------------------------------------------------------------------------------
    /// @brief An array with all the vertices
    //----------------------------------------------------------------------------------------------------------------
    std::vector<Position> m_vertices;
    //----------------------------------------------------------------------------------------------------------------
    /// @brief The number of the next index that is going to be saved
    //----------------------------------------------------------------------------------------------------------------
    unsigned int m_nextIndex;
    //----------------------------------------------------------------------------------------------------------------
    /// @brief The leght of the table
    //----------------------------------------------------------------------------------------------------------------
    static unsigned int s_length;

};

#endif // HASHTABLE_HPP
